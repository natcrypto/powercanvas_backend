from flask import Flask, request, jsonify
import os
import openai
from flask_cors import CORS

app = Flask(__name__)
CORS(app) # Enable CORS for all routes, allowing requests from the React frontend

# Set the OpenAI API key from an environment variable
openai.api_key = os.getenv("OPENAI_API_KEY")

@app.route("/api/generate-ai-insights", methods=["POST"])
def generate_ai_insights():
    if not openai.api_key:
        return jsonify({"error": "OpenAI API key not configured. Please set the OPENAI_API_KEY environment variable."}), 500

    try:
        data = request.get_json()
        if not data or "decisionAreas" not in data:
            return jsonify({"error": "Invalid input. 'decisionAreas' is required."}), 400

        decision_areas_data = data.get("decisionAreas", [])
        organization_type = data.get("organizationType", "Not specified")
        all_generated_insights = []

        if not decision_areas_data:
            return jsonify({"insights": [], "message": "No decision areas provided to analyze."}), 200

        for area in decision_areas_data:
            area_name = area.get("name", "Unnamed Decision Area")
            formal_owners = ", ".join(area.get("formalOwners", [])) or "None listed"
            actual_influencers = ", ".join(area.get("actualInfluencers", [])) or "None listed"
            voices_missing = ", ".join(area.get("voicesMissing", [])) or "None listed"

            prompt_template = f"""You are an expert in organisational design and systems thinking. You are helping a user analyse the power dynamics around a specific decision area.
They have identified three sets of roles:
    1. Formal Owners – those officially responsible for the decision: {formal_owners}
    2. Actual Influencers – those with informal power or influence: {actual_influencers}
    3. Missing Voices – people not currently involved but possibly relevant: {voices_missing}

For the decision area: "{area_name}"
(Organization type context: {organization_type})

Your task is to generate 2–4 high-quality insights. These should highlight:
    • Misalignment between formal ownership and actual influence
    • Potential gaps in perspective (e.g., lack of customer or delivery input)
    • Patterns of concentration, absence, or role silos
    • Nuanced, human-readable suggestions for improvement

Avoid generic or repetitive phrases. Ground your insights in the specific roles and decision area. Provide each insight as a separate point.
Insights:"""

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "You are an expert in organisational design and systems thinking."},
                        {"role": "user", "content": prompt_template}
                    ],
                    temperature=0.7,
                    max_tokens=250,
                    n=1,
                    stop=None
                )
                if response["choices"] and response["choices"][0]["message"] and response["choices"][0]["message"]["content"]:
                    generated_text = response["choices"][0]["message"]["content"].strip()
                    insights_list = [insight.strip().lstrip("- ").lstrip("* ").lstrip("• ") for insight in generated_text.split("\n") if insight.strip()]
                    all_generated_insights.append({
                        "decisionAreaName": area_name,
                        "generatedInsights": insights_list if insights_list else ["No specific insights generated by AI for this area."],
                        "status": "success"
                    })
                else:
                    all_generated_insights.append({
                        "decisionAreaName": area_name,
                        "generatedInsights": ["AI response was empty or malformed."],
                        "status": "error"
                    })
            except Exception as e:
                app.logger.error(f"OpenAI API call failed for area {area_name}: {str(e)}")
                all_generated_insights.append({
                    "decisionAreaName": area_name,
                    "generatedInsights": [f"Error generating insights for this area: {str(e)}"],
                    "status": "error"
                })
        
        return jsonify({"insights": all_generated_insights}), 200

    except Exception as e:
        app.logger.error(f"Error in /api/generate-ai-insights: {str(e)}")
        return jsonify({"error": "An unexpected error occurred on the server.", "details": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)), debug=True)

